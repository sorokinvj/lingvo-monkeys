// file: app/upload/components/UploadPage.tsx
'use client';
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import FileList from './FileList';
import { parseErrorMessage } from '@/lib/utils';
import { useMutation } from '@tanstack/react-query';
import { useUploadProgress } from '@/hooks/useUploadProgress';
import { getPresignedUrl, processFile, uploadToS3 } from './upload.utils';
import {
  MAX_FILE_SIZE,
  MAX_FILE_SIZE_TEXT,
  ALLOWED_AUDIO_TYPES,
} from '@/config/constants';

const UploadPage: React.FC = () => {
  const [error, setError] = useState<string | null>(null);

  const { progress, message, setMessage, updateProgress, reset, complete } =
    useUploadProgress();

  const uploadMutation = useMutation({
    mutationFn: async (file: File) => {
      const timings = {
        start: Date.now(),
        presign: 0,
        upload: 0,
        processing: 0,
        total: 0,
      };

      try {
        // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º presigned URL
        setMessage('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...');
        updateProgress('PRESIGN');
        const { url, fields, key, publicUrl } = await getPresignedUrl(file);
        timings.presign = Date.now() - timings.start;

        // –≠—Ç–∞–ø 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        setMessage('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
        updateProgress('PREPARING');

        // –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
        const uploadStart = Date.now();
        setMessage('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
        await uploadToS3(url, fields, file, (uploadProgress) => {
          updateProgress('UPLOAD', uploadProgress);
        });
        timings.upload = Date.now() - uploadStart;

        // –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞
        const processingStart = Date.now();
        await processFile(
          {
            name: file.name,
            path: key,
            size: file.size,
            mimeType: file.type,
            publicUrl,
          },
          (processProgress, processMessage) => {
            updateProgress('PROCESSING', processProgress);
            setMessage(processMessage);
          }
        );
        timings.processing = Date.now() - processingStart;
        timings.total = Date.now() - timings.start;

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üìä Upload Timings:', {
          fileName: file.name,
          fileSize: `${(file.size / (1024 * 1024)).toFixed(2)}MB`,
          presign: `${(timings.presign / 1000).toFixed(2)}s`,
          upload: `${(timings.upload / 1000).toFixed(2)}s`,
          processing: `${(timings.processing / 1000).toFixed(2)}s`,
          total: `${(timings.total / 1000).toFixed(2)}s`,
        });

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        updateProgress('COMPLETED');
        setMessage(
          `–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${(timings.total / 1000).toFixed(2)}s!`
        );
        complete();
      } catch (error) {
        console.error('‚ùå Upload error:', error);
        reset();
        throw error;
      }
    },
    onError: (error) => {
      setError(parseErrorMessage(error));
      reset();
    },
  });

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (!file) return;

    if (file.size > MAX_FILE_SIZE) {
      setError(
        `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_FILE_SIZE_TEXT}, —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ${(
          file.size /
          (1024 * 1024)
        ).toFixed(1)}–ú–ë`
      );
      return;
    }

    setError(null);
    uploadMutation.mutate(file);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: ALLOWED_AUDIO_TYPES,
    maxSize: MAX_FILE_SIZE,
  });

  return (
    <div className="p-4 w-full h-full md:mt-12">
      <div
        {...getRootProps()}
        className={`hidden md:block border-2 border-dashed p-8 text-center cursor-pointer ${
          isDragActive
            ? 'border-blue-500 bg-blue-50'
            : 'border-blue-300 rounded-lg'
        }`}
      >
        <h1 className="text-xl font-bold mb-4 text-blue-900">
          –ó–∞–≥—Ä—É–∑–∏—Ç—å MP3 –§–∞–π–ª
        </h1>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>–û—Ç–ø—É—Å—Ç–∏—Ç–µ MP3 —Ñ–∞–π–ª –∑–¥–µ—Å—å...</p>
        ) : (
          <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ MP3 —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
        )}
        <p className="text-sm text-gray-500 mt-4">
          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE_TEXT}
        </p>
        <p className="text-sm text-gray-500 mt-2">
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π&nbsp;(en), –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π&nbsp;(nl),
          –ò—Å–ø–∞–Ω—Å–∫–∏–π&nbsp;(es), –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π&nbsp;(id), –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π&nbsp;(it),
          –ö–∏—Ç–∞–π—Å–∫–∏–π&nbsp;(zh), –ö–æ—Ä–µ–π—Å–∫–∏–π&nbsp;(ko), –ù–µ–º–µ—Ü–∫–∏–π&nbsp;(de),
          –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π&nbsp;(pt), –†—É—Å—Å–∫–∏–π&nbsp;(ru), –¢—É—Ä–µ—Ü–∫–∏–π&nbsp;(tr),
          –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π&nbsp;(uk), –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π&nbsp;(fr), –•–∏–Ω–¥–∏&nbsp;(hi),
          –®–≤–µ–¥—Å–∫–∏–π&nbsp;(sv), –Ø–ø–æ–Ω—Å–∫–∏–π&nbsp;(ja)
        </p>
        {progress > 0 && (
          <div className="mt-4">
            <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div
                className="bg-blue-600 h-2.5 rounded-full"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <p className="mt-2">{message}</p>
          </div>
        )}
        {error && (
          <p className="text-red-500 text-center max-w-prose mx-auto mt-2">
            {error}
          </p>
        )}
      </div>
      <div className="mt-4 md:mt-8">
        <h1 className="text-3xl font-sans mb-4 text-gray-700">–í–∞—à–∏ —Ñ–∞–π–ª—ã</h1>
        <FileList />
      </div>
    </div>
  );
};

export default UploadPage;
